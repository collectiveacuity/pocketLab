{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pocket Lab A Command Line Tool for Managing Laboratory Projects by Collective Acuity Downloads http://pypi.python.org/pypi/pocketLab Source https://github.com/collectiveacuity/pocketLab Documentation https://collectiveacuity.github.io/pocketLab/ Introduction Pocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code. Integrated Services Docker : https://www.docker.com Virtualbox : (on Windows 7/8) Heroku : https://devcenter.heroku.com/articles/heroku-cli AWS : https://console.aws.amazon.com Installation From PyPi $ pip install pocketlab From GitHub $ git clone https://github.com/collectiveacuity/pocketLab $ cd pocketLab $ python setup.py sdist --format=gztar,zip $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz $ pip install dist/pocketlab-0.*-py3-none-any.whl Getting Started All commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type lab --help from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands. Initialize the lab framework in the working directory:: $ lab init <service> Return to service root from any directory:: $ home <service> You can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository. lab init <service> will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files. Further Reading Once you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the Commands page .","title":"Home"},{"location":"#pocket-lab","text":"A Command Line Tool for Managing Laboratory Projects by Collective Acuity Downloads http://pypi.python.org/pypi/pocketLab Source https://github.com/collectiveacuity/pocketLab Documentation https://collectiveacuity.github.io/pocketLab/","title":"Pocket Lab"},{"location":"#introduction","text":"Pocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code.","title":"Introduction"},{"location":"#integrated-services","text":"Docker : https://www.docker.com Virtualbox : (on Windows 7/8) Heroku : https://devcenter.heroku.com/articles/heroku-cli AWS : https://console.aws.amazon.com","title":"Integrated Services"},{"location":"#installation","text":"From PyPi $ pip install pocketlab From GitHub $ git clone https://github.com/collectiveacuity/pocketLab $ cd pocketLab $ python setup.py sdist --format=gztar,zip $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz $ pip install dist/pocketlab-0.*-py3-none-any.whl","title":"Installation"},{"location":"#getting-started","text":"All commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type lab --help from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands. Initialize the lab framework in the working directory:: $ lab init <service> Return to service root from any directory:: $ home <service> You can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository. lab init <service> will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files.","title":"Getting Started"},{"location":"#further-reading","text":"Once you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the Commands page .","title":"Further Reading"},{"location":"architecture/","text":"Architecture Pocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment. System Resources Resource Description service self-contained modular component of an application or project project group of interconnected services with user application image compilation of code & dependencies for service in a Docker image container instantiation of a service in a Docker container platform computational resources that run a service instance instantiation of a project on a platform region sub-division of platform to manage content distribution environment sub-division of plaform to manage development process repo version control repository containing the files for a service file path to a file with configuration settings virtualbox oracle virtualbox boot2docker image (on Win7/8) tag metadata associated with a resource log file or service in which to log stdout of service","title":"Architecture"},{"location":"architecture/#architecture","text":"Pocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment.","title":"Architecture"},{"location":"architecture/#system-resources","text":"Resource Description service self-contained modular component of an application or project project group of interconnected services with user application image compilation of code & dependencies for service in a Docker image container instantiation of a service in a Docker container platform computational resources that run a service instance instantiation of a project on a platform region sub-division of platform to manage content distribution environment sub-division of plaform to manage development process repo version control repository containing the files for a service file path to a file with configuration settings virtualbox oracle virtualbox boot2docker image (on Win7/8) tag metadata associated with a resource log file or service in which to log stdout of service","title":"System Resources"},{"location":"commands/","text":"Commands Init Init adds the config files for other lab commands. Description: Init adds files to the working directory which are required for lab projects. To create a framework for a webapp project, use the option --flask for a flask service, --webpack for a client-side ES6 framework using webpack or --express for a service-side ES6 server using node.js. With the options --pypi , --npm or --jquery , init creates instead a standard framework for publishing a module in python, node or jquery (respectively). The options --heroku , --ec2 and --gae create configuration files used by other lab processes for cloud deployment on heroku, ec2 and gae (respectively). NOTE: Init only creates files which are not already present. Usage: $ lab init [-h] [--vcs STRING] [--license STRING] [--flask] [--webpack] [--express] [--jquery] [--pypi] [--npm] [--heroku] [--ec2] [--gae] [--docker] [--aws] [--asg] [-q] [-f] [SERVICE] Help: Init adds files to the working directory which are required for lab projects. To create a framework for a webapp project, use the option '--flask' for a flask service, '--webpack' for a client-side ES6 framework using webpack or '-- express' for a service-side ES6 server using node.js. With the options '--pypi', '--npm' or '--jquery', init creates instead a standard framework for publishing a module in python, node or jquery (respectively). The options '--heroku', '-- ec2' and '--gae' create configuration files used by other lab processes for cloud deployment on heroku, ec2 and gae (respectively). NOTE: Init only creates files which are not already present. positional arguments: SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --vcs STRING VCS service to generate ignore file --license STRING name of software license type --flask create flask service framework --webpack create webpack client framework --express create express service framework --jquery create jquery service framework --pypi, --python create python module framework --npm, --node create node module framework --heroku add heroku configs to workdir --ec2 add ec2 configs to workdir --gae add gae configs to workdir --docker add docker configs to workdir --aws add aws config to .lab folder --asg add asg config to workdir -q, --quiet turn off lab process messages -f, --force overwrite the existing resource Clean Frees up space by removing superfluous files. Description: Removes broken resources from the registries. Usage: $ lab clean [-h] [-q] [--virtualbox STRING] Help: Removes broken resources from the registries. optional arguments: -h, --help show this help message and exit -q, --quiet turn off lab process messages --virtualbox STRING name of docker virtualbox on Win7/8 (default: default) Connect Edit settings on remote host manually. Description: Opens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead. PLEASE NOTE: connect uses the service name and other tags associated with remote instances to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab connect [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] PLATFORM [SERVICE] Help: Opens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead. PLEASE NOTE: connect uses the service name and other tags associated with remote instances to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages Deploy Makes a service available online. Description: Deploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/) PLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab deploy [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] [--resume] [--print] [--mount] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING | --jingo STRING] PLATFORM [SERVICE] Help: Deploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku --html site/) PLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource --resume resume from prior progress point --print prints command(s) without running --mount mount volumes onto container --virtualbox STRING name of docker virtualbox on Win7/8 (default: default) --html STRING path to folder with index.html --php STRING path to folder with index.php --python STRING path to folder with requirements.txt --java STRING path to folder with Java Procfile --ruby STRING path to folder with Ruby Procfile --node STRING path to folder with package.json --jingo STRING path to folder with jingo Procfile Get Copies remote files to your local machine. Description: Copies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab get [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE] Help: Copies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PATH path to file or folder PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource Home Home makes it easy to locate your services. Description: Home adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing $ home <service> will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by lab init <service> Usage: $ lab home [-h] [--print] [--path STRING] [-f] SERVICE Help: Home adds the service name and working directory to the lab registry. On its first run, it also adds the alias 'home' to bash config. As a result, on subsequent terminal sessions, typing 'home <service>' will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by 'lab init <service>' positional arguments: SERVICE name of service in lab registry optional arguments: -h, --help show this help message and exit --print prints path of service root --path STRING path to service root -f, --force overwrite the existing resource Install Install adds a fully-configured software package to a remote platform. Description: Installs a software package on a running instance on a remote platform. Install is currently only available for the ec2 platform and supports the following packages: nginx certbot Usage: $ lab install [-h] [--env STRING] [--region STRING] [--tags STRING] [--print] [-q] PACKAGE PLATFORM [SERVICE] Help: Installs a software package on a running instance on a remote platform. Install is currently only available for the ec2 platform and supports the following packages: nginx certbot positional arguments: PACKAGE name of software package PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --region STRING name of platform region --tags STRING tags associated with resource (comma sep) --print prints command(s) without running -q, --quiet turn off lab process messages Launch Launch creates one or more remote instances to host services. Description: Launches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run lab init --ec2 and adjust the settings appropriately. Usage: $ lab launch [-h] [--region STRING] [-q] [-f] PLATFORM [SERVICE] Help: Launches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run 'lab init --ec2' and adjust the settings appropriately. positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource List Provides a way to find existing resources. Description: Generates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming. Usage: $ lab list [-h] [--region STRING] [--more] [-a] RESOURCE [PLATFORM] Help: Generates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming. positional arguments: RESOURCE type of lab resource. eg. services, images... PLATFORM (optional) name of remote platfrom optional arguments: -h, --help show this help message and exit --region STRING name of platform region --more paginate results longer than console height -a, --all include all details in results Put Copy files from your local machine. Description: Copies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform. PLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab put [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE] Help: Copies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform. PLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PATH path to file or folder PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource Remove Removes a service listing from the lab registry. Description: Removes clutter from your records. Usage: $ lab remove [-h] SERVICE Help: Removes clutter from your records. positional arguments: SERVICE name of service in lab registry optional arguments: -h, --help show this help message and exit Start Makes services available on localhost Description: Initiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container. Usage: $ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--print] [SERVICES [SERVICES ...]] Help: Initiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container. positional arguments: SERVICES list of services in lab registry optional arguments: -h, --help show this help message and exit -q, --quiet turn off lab process messages --virtualbox STRING name of docker virtualbox on Win7/8 (default: default) --env STRING type of development environment (default: dev) --print prints command(s) without running Update Keeps your services up-to-date with the latest configurations. Description: Updates the configuration files for a service. When a package and platform are specified, update adds (or updates) the service to the configuration files for the package on the platform. Otherwise, update only updates the local configuration files for a service with the latest pocketlab configurations. Usage: $ lab update [-h] [--env STRING] [--region STRING] [--tags STRING] [--print] [-a] [--ssl] [-q] [PACKAGE] [PLATFORM] [SERVICE] Help: Updates the configuration files for a service. When a package and platform are specified, update adds (or updates) the service to the configuration files for the package on the platform. Otherwise, update only updates the local configuration files for a service with the latest pocketlab configurations. positional arguments: PACKAGE (optional) name of software package PLATFORM (optional) name of remote platfrom SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --region STRING name of platform region --tags STRING tags associated with resource (comma sep) --print prints command(s) without running -a, --all apply to all services in registry --ssl turn off ssl everywhere -q, --quiet turn off lab process messages","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#init","text":"Init adds the config files for other lab commands. Description: Init adds files to the working directory which are required for lab projects. To create a framework for a webapp project, use the option --flask for a flask service, --webpack for a client-side ES6 framework using webpack or --express for a service-side ES6 server using node.js. With the options --pypi , --npm or --jquery , init creates instead a standard framework for publishing a module in python, node or jquery (respectively). The options --heroku , --ec2 and --gae create configuration files used by other lab processes for cloud deployment on heroku, ec2 and gae (respectively). NOTE: Init only creates files which are not already present. Usage: $ lab init [-h] [--vcs STRING] [--license STRING] [--flask] [--webpack] [--express] [--jquery] [--pypi] [--npm] [--heroku] [--ec2] [--gae] [--docker] [--aws] [--asg] [-q] [-f] [SERVICE] Help: Init adds files to the working directory which are required for lab projects. To create a framework for a webapp project, use the option '--flask' for a flask service, '--webpack' for a client-side ES6 framework using webpack or '-- express' for a service-side ES6 server using node.js. With the options '--pypi', '--npm' or '--jquery', init creates instead a standard framework for publishing a module in python, node or jquery (respectively). The options '--heroku', '-- ec2' and '--gae' create configuration files used by other lab processes for cloud deployment on heroku, ec2 and gae (respectively). NOTE: Init only creates files which are not already present. positional arguments: SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --vcs STRING VCS service to generate ignore file --license STRING name of software license type --flask create flask service framework --webpack create webpack client framework --express create express service framework --jquery create jquery service framework --pypi, --python create python module framework --npm, --node create node module framework --heroku add heroku configs to workdir --ec2 add ec2 configs to workdir --gae add gae configs to workdir --docker add docker configs to workdir --aws add aws config to .lab folder --asg add asg config to workdir -q, --quiet turn off lab process messages -f, --force overwrite the existing resource","title":"Init"},{"location":"commands/#clean","text":"Frees up space by removing superfluous files. Description: Removes broken resources from the registries. Usage: $ lab clean [-h] [-q] [--virtualbox STRING] Help: Removes broken resources from the registries. optional arguments: -h, --help show this help message and exit -q, --quiet turn off lab process messages --virtualbox STRING name of docker virtualbox on Win7/8 (default: default)","title":"Clean"},{"location":"commands/#connect","text":"Edit settings on remote host manually. Description: Opens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead. PLEASE NOTE: connect uses the service name and other tags associated with remote instances to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab connect [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] PLATFORM [SERVICE] Help: Opens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead. PLEASE NOTE: connect uses the service name and other tags associated with remote instances to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages","title":"Connect"},{"location":"commands/#deploy","text":"Makes a service available online. Description: Deploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/) PLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab deploy [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] [--resume] [--print] [--mount] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING | --jingo STRING] PLATFORM [SERVICE] Help: Deploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku --html site/) PLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource --resume resume from prior progress point --print prints command(s) without running --mount mount volumes onto container --virtualbox STRING name of docker virtualbox on Win7/8 (default: default) --html STRING path to folder with index.html --php STRING path to folder with index.php --python STRING path to folder with requirements.txt --java STRING path to folder with Java Procfile --ruby STRING path to folder with Ruby Procfile --node STRING path to folder with package.json --jingo STRING path to folder with jingo Procfile","title":"Deploy"},{"location":"commands/#get","text":"Copies remote files to your local machine. Description: Copies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab get [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE] Help: Copies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PATH path to file or folder PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource","title":"Get"},{"location":"commands/#home","text":"Home makes it easy to locate your services. Description: Home adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing $ home <service> will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by lab init <service> Usage: $ lab home [-h] [--print] [--path STRING] [-f] SERVICE Help: Home adds the service name and working directory to the lab registry. On its first run, it also adds the alias 'home' to bash config. As a result, on subsequent terminal sessions, typing 'home <service>' will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by 'lab init <service>' positional arguments: SERVICE name of service in lab registry optional arguments: -h, --help show this help message and exit --print prints path of service root --path STRING path to service root -f, --force overwrite the existing resource","title":"Home"},{"location":"commands/#install","text":"Install adds a fully-configured software package to a remote platform. Description: Installs a software package on a running instance on a remote platform. Install is currently only available for the ec2 platform and supports the following packages: nginx certbot Usage: $ lab install [-h] [--env STRING] [--region STRING] [--tags STRING] [--print] [-q] PACKAGE PLATFORM [SERVICE] Help: Installs a software package on a running instance on a remote platform. Install is currently only available for the ec2 platform and supports the following packages: nginx certbot positional arguments: PACKAGE name of software package PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --region STRING name of platform region --tags STRING tags associated with resource (comma sep) --print prints command(s) without running -q, --quiet turn off lab process messages","title":"Install"},{"location":"commands/#launch","text":"Launch creates one or more remote instances to host services. Description: Launches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run lab init --ec2 and adjust the settings appropriately. Usage: $ lab launch [-h] [--region STRING] [-q] [-f] PLATFORM [SERVICE] Help: Launches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run 'lab init --ec2' and adjust the settings appropriately. positional arguments: PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource","title":"Launch"},{"location":"commands/#list","text":"Provides a way to find existing resources. Description: Generates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming. Usage: $ lab list [-h] [--region STRING] [--more] [-a] RESOURCE [PLATFORM] Help: Generates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming. positional arguments: RESOURCE type of lab resource. eg. services, images... PLATFORM (optional) name of remote platfrom optional arguments: -h, --help show this help message and exit --region STRING name of platform region --more paginate results longer than console height -a, --all include all details in results","title":"List"},{"location":"commands/#put","text":"Copy files from your local machine. Description: Copies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform. PLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c. Usage: $ lab put [-h] [--env STRING] [--tags STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE] Help: Copies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform. PLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with key \"Services\" and value \"<service1>,<service2>\". positional arguments: PATH path to file or folder PLATFORM name of remote platform SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --tags STRING tags associated with resource (comma sep) --region STRING name of platform region -q, --quiet turn off lab process messages -f, --force overwrite the existing resource","title":"Put"},{"location":"commands/#remove","text":"Removes a service listing from the lab registry. Description: Removes clutter from your records. Usage: $ lab remove [-h] SERVICE Help: Removes clutter from your records. positional arguments: SERVICE name of service in lab registry optional arguments: -h, --help show this help message and exit","title":"Remove"},{"location":"commands/#start","text":"Makes services available on localhost Description: Initiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container. Usage: $ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--print] [SERVICES [SERVICES ...]] Help: Initiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container. positional arguments: SERVICES list of services in lab registry optional arguments: -h, --help show this help message and exit -q, --quiet turn off lab process messages --virtualbox STRING name of docker virtualbox on Win7/8 (default: default) --env STRING type of development environment (default: dev) --print prints command(s) without running","title":"Start"},{"location":"commands/#update","text":"Keeps your services up-to-date with the latest configurations. Description: Updates the configuration files for a service. When a package and platform are specified, update adds (or updates) the service to the configuration files for the package on the platform. Otherwise, update only updates the local configuration files for a service with the latest pocketlab configurations. Usage: $ lab update [-h] [--env STRING] [--region STRING] [--tags STRING] [--print] [-a] [--ssl] [-q] [PACKAGE] [PLATFORM] [SERVICE] Help: Updates the configuration files for a service. When a package and platform are specified, update adds (or updates) the service to the configuration files for the package on the platform. Otherwise, update only updates the local configuration files for a service with the latest pocketlab configurations. positional arguments: PACKAGE (optional) name of software package PLATFORM (optional) name of remote platfrom SERVICE (optional) service in lab registry optional arguments: -h, --help show this help message and exit --env STRING type of development environment (default: test) --region STRING name of platform region --tags STRING tags associated with resource (comma sep) --print prints command(s) without running -a, --all apply to all services in registry --ssl turn off ssl everywhere -q, --quiet turn off lab process messages","title":"Update"},{"location":"libraries/","text":"Libraries Configuration Settings for Third-Party Libraries Nginx A Reverse Proxy Server Installation on EC2: sudo yum install -y nginx sudo chmod 777 /etc/rc3.d/S99local; echo \"service nginx restart\" >> /etc/rc3.d/S99local Modification: nano /etc/nginx/nginx.conf sudo service nginx restart Troubleshooting: Certbot A Free SSL Certificate Authority Installation on EC2: $ sudo yum install -y wget $ wget https://dl.eff.org/certbot-auto $ sudo chmod a+x certbot-auto $ sudo mv certbot-auto /usr/local/bin/certbot-auto $ certbot-auto --debug -y --version $ sudo service nginx stop # optional $ sudo su - $ certbot-auto certonly --standalone -d collectiveacuity.com,www.collectiveacuity.com --debug > Is this ok [y/d/N]: > Enter email address: (used \u2026 cancel): > (A)gree/(C)ancel: > (Y)es/(N)o: $ exit $ sudo service nginx start # optional Renewal: (certificate expires every 90 days) $ sudo su - $ certbot-auto renew --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" $ exit Modification: $ sudo su - $ certbot-auto certonly --standalone --debug -n --cert-name collectiveacuity.com -d collectiveacuity.com,www.collectiveacuity.com,api.collectiveacuity.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --debug $ exit Check Certificates: $ sudo su - $ certbot-auto certificates --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" $ exit Troubleshooting: A. Due to updates to certbot, python modules may be missing from installation: $ sudo su - $ pip install -U pip $ /root/.local/share/letsencrypt/bin/pip install {missing module} B. Due to 32bit / 64 bit issues, python venv libs may need to be copied: $ sudo su - $ \\cp -r /opt/eff.org/certbot/venv/lib64/* /opt/eff.org/certbot/venv/lib/ $ exit Keytool A Keystore Generator for Self-Signed SSL Trust Rings Create Folder for Keys: mkdir keys cd keys Generate Root RSA Key: openssl req -newkey rsa:2048 -x509 -nodes -keyout root.key \\ -out root.crt -days 36500 -passout pass:mysecretpassword \\ -subj /CN=root/OU=None/O=None/L=None/C=None Generate Node Key: keytool -genkey -keyalg RSA -alias 123.456.789.0 \\ -validity 36500 -keystore 123.456.789.0.jks \\ -storepass mysecretpassword -keypass mysecretpassword -keysize 4096 \\ -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\" keytool -importkeystore -srckeystore 123.456.789.0.jks \\ -destkeystore 123.456.789.0.jks -deststoretype pkcs12 \\ -storepass mysecretpassword -keypass mysecretpassword Generate Cert Request: keytool -certreq -alias 123.456.789.0 -file 123.456.789.0.csr \\ -keystore 123.456.789.0.jks -storepass mysecretpassword -keypass mysecretpassword \\ -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\" Sign Cert with Root Cert: openssl x509 -req -CA root.crt -CAkey root.key \\ -in 123.456.789.0.csr -out 123.456.789.0.crt -days 36500 \\ -CAcreateserial -passin pass:mysecretpassword Add Certs to Node Keystore: keytool -importcert -keystore 123.456.789.0.jks -alias root \\ -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword keytool -importcert -keystore 123.456.789.0.jks \\ -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\ -keypass mysecretpassword -storepass mysecretpassword Add Root Cert to Truststore: keytool -importcert -keystore truststore.jks -alias root \\ -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword Add Node Certs to Truststore (for each node): keytool -importcert -keystore truststore.jks \\ -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\ -keypass mysecretpassword -storepass mysecretpassword Verify Certificates: openssl x509 -in root.crt -text -noout keytool -list -keystore 123.456.789.0.jks -storepass mysecretpassword openssl verify -CAfile root.crt 123.456.789.0.crt keytool -list -keystore truststore.jks -storepass mysecretpassword Generate PEM Files: openssl pkcs12 -in 123.456.789.0.jks -nokeys \\ -out 123.456.789.0.cer.pem -passin pass:mysecretpassword openssl pkcs12 -in 123.456.789.0.jks -nodes \\ -nocerts -out 123.456.789.0.key.pem -passin pass:mysecretpassword Generate Certificate Chain: cat root.crt 123.456.789.0.crt > 123.456.789.0.chain","title":"Libraries"},{"location":"libraries/#libraries","text":"Configuration Settings for Third-Party Libraries","title":"Libraries"},{"location":"libraries/#nginx","text":"A Reverse Proxy Server Installation on EC2: sudo yum install -y nginx sudo chmod 777 /etc/rc3.d/S99local; echo \"service nginx restart\" >> /etc/rc3.d/S99local Modification: nano /etc/nginx/nginx.conf sudo service nginx restart Troubleshooting:","title":"Nginx"},{"location":"libraries/#certbot","text":"A Free SSL Certificate Authority Installation on EC2: $ sudo yum install -y wget $ wget https://dl.eff.org/certbot-auto $ sudo chmod a+x certbot-auto $ sudo mv certbot-auto /usr/local/bin/certbot-auto $ certbot-auto --debug -y --version $ sudo service nginx stop # optional $ sudo su - $ certbot-auto certonly --standalone -d collectiveacuity.com,www.collectiveacuity.com --debug > Is this ok [y/d/N]: > Enter email address: (used \u2026 cancel): > (A)gree/(C)ancel: > (Y)es/(N)o: $ exit $ sudo service nginx start # optional Renewal: (certificate expires every 90 days) $ sudo su - $ certbot-auto renew --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" $ exit Modification: $ sudo su - $ certbot-auto certonly --standalone --debug -n --cert-name collectiveacuity.com -d collectiveacuity.com,www.collectiveacuity.com,api.collectiveacuity.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --debug $ exit Check Certificates: $ sudo su - $ certbot-auto certificates --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" $ exit Troubleshooting: A. Due to updates to certbot, python modules may be missing from installation: $ sudo su - $ pip install -U pip $ /root/.local/share/letsencrypt/bin/pip install {missing module} B. Due to 32bit / 64 bit issues, python venv libs may need to be copied: $ sudo su - $ \\cp -r /opt/eff.org/certbot/venv/lib64/* /opt/eff.org/certbot/venv/lib/ $ exit","title":"Certbot"},{"location":"libraries/#keytool","text":"A Keystore Generator for Self-Signed SSL Trust Rings Create Folder for Keys: mkdir keys cd keys Generate Root RSA Key: openssl req -newkey rsa:2048 -x509 -nodes -keyout root.key \\ -out root.crt -days 36500 -passout pass:mysecretpassword \\ -subj /CN=root/OU=None/O=None/L=None/C=None Generate Node Key: keytool -genkey -keyalg RSA -alias 123.456.789.0 \\ -validity 36500 -keystore 123.456.789.0.jks \\ -storepass mysecretpassword -keypass mysecretpassword -keysize 4096 \\ -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\" keytool -importkeystore -srckeystore 123.456.789.0.jks \\ -destkeystore 123.456.789.0.jks -deststoretype pkcs12 \\ -storepass mysecretpassword -keypass mysecretpassword Generate Cert Request: keytool -certreq -alias 123.456.789.0 -file 123.456.789.0.csr \\ -keystore 123.456.789.0.jks -storepass mysecretpassword -keypass mysecretpassword \\ -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\" Sign Cert with Root Cert: openssl x509 -req -CA root.crt -CAkey root.key \\ -in 123.456.789.0.csr -out 123.456.789.0.crt -days 36500 \\ -CAcreateserial -passin pass:mysecretpassword Add Certs to Node Keystore: keytool -importcert -keystore 123.456.789.0.jks -alias root \\ -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword keytool -importcert -keystore 123.456.789.0.jks \\ -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\ -keypass mysecretpassword -storepass mysecretpassword Add Root Cert to Truststore: keytool -importcert -keystore truststore.jks -alias root \\ -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword Add Node Certs to Truststore (for each node): keytool -importcert -keystore truststore.jks \\ -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\ -keypass mysecretpassword -storepass mysecretpassword Verify Certificates: openssl x509 -in root.crt -text -noout keytool -list -keystore 123.456.789.0.jks -storepass mysecretpassword openssl verify -CAfile root.crt 123.456.789.0.crt keytool -list -keystore truststore.jks -storepass mysecretpassword Generate PEM Files: openssl pkcs12 -in 123.456.789.0.jks -nokeys \\ -out 123.456.789.0.cer.pem -passin pass:mysecretpassword openssl pkcs12 -in 123.456.789.0.jks -nodes \\ -nocerts -out 123.456.789.0.key.pem -passin pass:mysecretpassword Generate Certificate Chain: cat root.crt 123.456.789.0.crt > 123.456.789.0.chain","title":"Keytool"},{"location":"roadmap/","text":"Roadmap Features Creates VCS Compliant Project Framework Creates Python Module Framework Runs as Docker Compose Wrapper Maintains Compatibility Across OS Automates Service Deployment to EC2 Automates Service Deployment to Heroku Automates Let\u2019s Encrypt SSL Certificates Updates GitHub / BitBucket / Gitlab Repos TODO Adds PingAPI / Uptime Robot Monitoring TODO Adds LastPass Credential Sharing TODO Performs Test Sequencing TODO Automates AWS / Heroku Account Setup TODO Commands Command Description Status init creates a lab framework in workdir available list lists the instances of a resource type available update updates the config files for a service available remove removes a service from the registry available clean cleans registries of broken resources available home creates a quicklink to workdir available build creates a new image from Dockerfile for service <sup>use <i><b>docker build</b></i></sup> start initiates Docker containers for services available stop terminates a running container for a service <sup>use <i><b>docker stop</b></i></sup> enter opens up a shell cli inside a running container <sup>use <i><b>docker exec</b></i></sup> launch starts instances on remote platform available terminate removes an instance from a remote platform connect connects to remote host through ssh available put copy a file to remote host through scp available get copy a file from remote host through scp available deploy deploys service to a remote platform available withdrawal removes a service from a live remote host setup creates account resources for a remote platform teardown removes an account from a remote platform renew retrieves a new ssl certificate for url endpoint monitor creates a monitor of services running on remote host share transfers service credentials through password manager","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"","title":"Roadmap"},{"location":"roadmap/#features","text":"Creates VCS Compliant Project Framework Creates Python Module Framework Runs as Docker Compose Wrapper Maintains Compatibility Across OS Automates Service Deployment to EC2 Automates Service Deployment to Heroku Automates Let\u2019s Encrypt SSL Certificates Updates GitHub / BitBucket / Gitlab Repos TODO Adds PingAPI / Uptime Robot Monitoring TODO Adds LastPass Credential Sharing TODO Performs Test Sequencing TODO Automates AWS / Heroku Account Setup TODO","title":"Features"},{"location":"roadmap/#commands","text":"Command Description Status init creates a lab framework in workdir available list lists the instances of a resource type available update updates the config files for a service available remove removes a service from the registry available clean cleans registries of broken resources available home creates a quicklink to workdir available build creates a new image from Dockerfile for service <sup>use <i><b>docker build</b></i></sup> start initiates Docker containers for services available stop terminates a running container for a service <sup>use <i><b>docker stop</b></i></sup> enter opens up a shell cli inside a running container <sup>use <i><b>docker exec</b></i></sup> launch starts instances on remote platform available terminate removes an instance from a remote platform connect connects to remote host through ssh available put copy a file to remote host through scp available get copy a file from remote host through scp available deploy deploys service to a remote platform available withdrawal removes a service from a live remote host setup creates account resources for a remote platform teardown removes an account from a remote platform renew retrieves a new ssl certificate for url endpoint monitor creates a monitor of services running on remote host share transfers service credentials through password manager","title":"Commands"}]}