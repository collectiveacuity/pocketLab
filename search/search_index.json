{
    "docs": [
        {
            "location": "/",
            "text": "Pocket Lab\n\n\nA Command Line Tool for Managing Laboratory Projects\n\nby \nCollective Acuity\n\n\n\n  \n\n    \n\n      \nDownloads\n\n      \nhttp://pypi.python.org/pypi/pocketLab\n\n    \n\n    \n\n      \nSource\n\n      \nhttps://github.com/collectiveacuity/pocketLab\n\n    \n\n    \n\n      \nDocumentation\n\n      \nhttps://collectiveacuity.github.io/pocketLab/\n\n    \n\n  \n\n\n\n\n\nIntroduction\n\n\nPocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code.  \n\n\nIntegrated Services\n\n\n\n\nDocker\n: https://www.docker.com\n\n\nVirtualbox\n: (on Windows 7/8)\n\n\nHeroku\n: https://devcenter.heroku.com/articles/heroku-cli\n\n\nAWS\n: https://console.aws.amazon.com\n\n\n\n\nInstallation\n\n\nFrom PyPi\n\n\n    $ pip install pocketlab\n\n\n\n\nFrom GitHub\n\n\n    $ git clone https://github.com/collectiveacuity/pocketLab\n    $ cd pocketLab\n    $ python setup.py sdist --format=gztar,zip\n    $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz\n    $ pip install dist/pocketlab-0.*-py3-none-any.whl\n\n\n\n\nGetting Started\n\n\nAll commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type \nlab --help\n from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands. \n\n\nInitialize the lab framework in the working directory::\n\n\n$ lab init <service>\n\n\n\nReturn to service root from any directory::\n\n\n$ home <service>\n\n\n\nYou can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository. \nlab init <service>\n will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files.\n\n\nFurther Reading\n\n\nOnce you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the \nCommands page\n.",
            "title": "Home"
        },
        {
            "location": "/#pocket-lab",
            "text": "A Command Line Tool for Managing Laboratory Projects \nby  Collective Acuity  \n   \n     \n       Downloads \n       http://pypi.python.org/pypi/pocketLab \n     \n     \n       Source \n       https://github.com/collectiveacuity/pocketLab \n     \n     \n       Documentation \n       https://collectiveacuity.github.io/pocketLab/",
            "title": "Pocket Lab"
        },
        {
            "location": "/#introduction",
            "text": "Pocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code.",
            "title": "Introduction"
        },
        {
            "location": "/#integrated-services",
            "text": "Docker : https://www.docker.com  Virtualbox : (on Windows 7/8)  Heroku : https://devcenter.heroku.com/articles/heroku-cli  AWS : https://console.aws.amazon.com",
            "title": "Integrated Services"
        },
        {
            "location": "/#installation",
            "text": "From PyPi      $ pip install pocketlab  From GitHub      $ git clone https://github.com/collectiveacuity/pocketLab\n    $ cd pocketLab\n    $ python setup.py sdist --format=gztar,zip\n    $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz\n    $ pip install dist/pocketlab-0.*-py3-none-any.whl",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "All commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type  lab --help  from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands.   Initialize the lab framework in the working directory::  $ lab init <service>  Return to service root from any directory::  $ home <service>  You can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository.  lab init <service>  will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files.",
            "title": "Getting Started"
        },
        {
            "location": "/#further-reading",
            "text": "Once you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the  Commands page .",
            "title": "Further Reading"
        },
        {
            "location": "/commands/",
            "text": "Commands\n\n\nInit\n\n\nInit adds the config files for other lab commands.\n  \n\n\nDescription:\n\nInit adds a number of files to the working directory which are required for other lab processes. If not present, it will create a \ndocker-compose.yaml\n file and a \n.lab\n folder in the root directory to manage various configuration options. It will also create, if missing, \ncred/\n and \ndata/\n folders to store sensitive project information outside version control along with a \n.gitignore\n (or \n.hgignore\n) file to escape out standard non-VCS files.\n\n\nPLEASE NOTE: With the option \n--module\n, init creates instead a standard framework for publishing a python module.  \n\n\nUsage:\n\n\n$ lab init [-h] [--vcs STRING] [--license STRING] [--module] [--heroku] [--aws] [--ec2] [--asg] [-q] [-f] [SERVICE]\n\n\n\n\nHelp:\n \n\n\nInit adds a number of files to the working directory which are required for\nother lab processes. If not present, it will create a 'docker-compose.yaml' file\nand a '.lab' folder in the root directory to manage various configuration\noptions. It will also create, if missing, 'cred/' and 'data/' folders to store\nsensitive project information outside version control along with a '.gitignore'\n(or '.hgignore') file to escape out standard non-VCS files. PLEASE NOTE: With\nthe option '--module', init creates instead a standard framework for publishing\na python module.\n\npositional arguments:\n  SERVICE           (optional) service in lab registry\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --vcs STRING      VCS service to generate ignore file\n  --license STRING  name of software license type\n  --module          create python module framework\n  --heroku          add heroku config to .lab folder\n  --aws             add aws config to .lab folder\n  --ec2             add ec2 config to workdir\n  --asg             add asg config to workdir\n  -q, --quiet       turn off lab process messages\n  -f, --force       overwrite the existing resource\n\n\n\n\nClean\n\n\nFrees up space by removing superfluous files.\n  \n\n\nDescription:\n\nRemoves broken resources from the registries.  \n\n\nUsage:\n\n\n$ lab clean [-h] [-q] [--virtualbox STRING]\n\n\n\n\nHelp:\n \n\n\nRemoves broken resources from the registries.\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n\n\n\n\nConnect\n\n\nEdit settings on remote host manually.\n  \n\n\nDescription:\n\nOpens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead.\n\n\nPLEASE NOTE: connect uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of \nlab launch ec2\n. Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c\n,\n\u201c.  \n\n\nUsage:\n\n\n$ lab connect [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nOpens up a direct ssh connection to remote host. Connect is currently only\navailable to the Amazon ec2 platform and only on systems running ssh natively.\nTo connect to a remote host on Windows, try using Putty instead. PLEASE NOTE:\nconnect uses the service name specified in the docker-compose.yaml configuration\nfile to determine which instance to connect to. The service name will be added\nas part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with\nkey \"Services\" and value \"<service1>,<service2>\".\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n\n\n\n\nDeploy\n\n\nMakes a service available online.\n  \n\n\nDescription:\n\nDeploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/)\n\n\nPLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of \nlab launch ec2\n. Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c\n,\n\u201c.  \n\n\nUsage:\n\n\n$ lab deploy [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] [--ssl] [--resume] [--print] [--mount] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING | --jingo STRING] PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nDeploys a service to a remote platform. Deploy is currently only available for\nthe heroku and ec2 platforms. Deploy can also deploy static html sites and apps\nusing their dependencies if the root folder is added to one of the runtime type\nflags (ex. lab deploy heroku --html site/) PLEASE NOTE: deploy uses the service\nname specified in the docker-compose.yaml configuration file to determine which\ninstance to connect to. The service name will be added as part of 'lab launch\nec2'. Otherwise, a tag must be added to the instance with key \"Services\" and\nvalue \"<service1>,<service2>\".\n\npositional arguments:\n  PLATFORM             name of remote platform\n  SERVICE              (optional) service in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --env STRING         type of development environment (default: test)\n  --tag STRING         tag associated with resource\n  --region STRING      name of platform region\n  -q, --quiet          turn off lab process messages\n  -f, --force          overwrite the existing resource\n  --ssl                turn off ssl everywhere\n  --resume             resume from prior progress point\n  --print              prints command(s) without running\n  --mount              mount volumes onto container\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --html STRING        path to folder with index.html\n  --php STRING         path to folder with index.php\n  --python STRING      path to folder with requirements.txt\n  --java STRING        path to folder with Java Procfile\n  --ruby STRING        path to folder with Ruby Procfile\n  --node STRING        path to folder with package.json\n  --jingo STRING       path to folder with jingo Procfile\n\n\n\n\nGet\n\n\nCopies remote files to your local machine.\n  \n\n\nDescription:\n\nCopies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform.\n\n\nPLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of \nlab launch ec2\n. Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c\n,\n\u201c.  \n\n\nUsage:\n\n\n$ lab get [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nCopies a file or folder on remote host to working directory on localhost. Get is\ncurrently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the\nservice name specified in the docker-compose.yaml configuration file to\ndetermine which instance to connect to. The service name will be added as part\nof 'lab launch ec2'. Otherwise, a tag must be added to the instance with key\n\"Services\" and value \"<service1>,<service2>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource\n\n\n\n\nHome\n\n\nHome makes it easy to locate your services.\n  \n\n\nDescription:\n\nHome adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing \n$ home <service>\n will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by \nlab init <service>\n  \n\n\nUsage:\n\n\n$ lab home [-h] [--print] [--path STRING] [-f] SERVICE\n\n\n\n\nHelp:\n \n\n\nHome adds the service name and working directory to the lab registry. On its\nfirst run, it also adds the alias 'home' to bash config. As a result, on\nsubsequent terminal sessions, typing 'home <service>' will change the working\ndirectory to the folder registered under the service name. A quicklink to the\nworkdir is also added by 'lab init <service>'\n\npositional arguments:\n  SERVICE        name of service in lab registry\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --print        prints path of service root\n  --path STRING  path to service root\n  -f, --force    overwrite the existing resource\n\n\n\n\nLaunch\n\n\nLaunch creates one or more remote instances to host services.\n  \n\n\nDescription:\n\nLaunches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run \nlab init --ec2\n and adjust the settings appropriately.  \n\n\nUsage:\n\n\n$ lab launch [-h] [--region STRING] [-i] [-q] [-f] PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nLaunches an instance or an auto-scaling group on a remote platform. Launch is\ncurrently only available for the ec2 platform. To create an configuration file\nto launch an ec2 instance, run 'lab init --ec2' and adjust the settings\nappropriately.\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  -i, --install    install deployment libraries on platform\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource\n\n\n\n\nList\n\n\nProvides a way to find existing resources.\n  \n\n\nDescription:\n\nGenerates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming.  \n\n\nUsage:\n\n\n$ lab list [-h] [--region STRING] [--more] [-a] RESOURCE [PLATFORM]\n\n\n\n\nHelp:\n \n\n\nGenerates a list of the resources of a specific type. Only the service resource\ntype is supported, but docker oriented and remote host kinds of resources are\ncoming.\n\npositional arguments:\n  RESOURCE         type of lab resource. eg. services, images...\n  PLATFORM         (optional) name of remote platfrom\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  --more           paginate results longer than console height\n  -a, --all        include all details in results\n\n\n\n\nPut\n\n\nCopy files from your local machine.\n  \n\n\nDescription:\n\nCopies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform.\n\n\nPLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of \nlab launch ec2\n. Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c\n,\n\u201c.  \n\n\nUsage:\n\n\n$ lab put [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nCopies a local file or folder to user home on remote host. Put is currently only\navailable for the Amazon ec2 platform. PLEASE NOTE: put uses the service name\nspecified in the docker-compose.yaml configuration file to determine which\ninstance to connect to. The service name will be added as part of 'lab launch\nec2'. Otherwise, a tag must be added to the instance with key \"Services\" and\nvalue \"<service1>,<service2>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource\n\n\n\n\nRemove\n\n\nRemoves a service listing from the lab registry.\n  \n\n\nDescription:\n\nRemoves clutter from your records.  \n\n\nUsage:\n\n\n$ lab remove [-h] SERVICE\n\n\n\n\nHelp:\n \n\n\nRemoves clutter from your records.\n\npositional arguments:\n  SERVICE     name of service in lab registry\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n\n\n\nStart\n\n\nMakes services available on localhost\n  \n\n\nDescription:\n\nInitiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container.  \n\n\nUsage:\n\n\n$ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--print] [SERVICES [SERVICES ...]]\n\n\n\n\nHelp:\n \n\n\nInitiates a container with the Docker image for one or more services. Unless\noverridden by flags, lab automatically adds the environmental variables\nSYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine\nto the container.\n\npositional arguments:\n  SERVICES             list of services in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --env STRING         type of development environment (default: dev)\n  --print              prints command(s) without running\n\n\n\n\nUpdate\n\n\nKeeps your services up-to-date with the latest configurations.\n  \n\n\nDescription:\n\nUpdates the configuration files for a service with the latest pocketlab configurations.  \n\n\nUsage:\n\n\n$ lab update [-h] [-a] [-q] [SERVICES [SERVICES ...]]\n\n\n\n\nHelp:\n \n\n\nUpdates the configuration files for a service with the latest pocketlab\nconfigurations.\n\npositional arguments:\n  SERVICES     list of services in lab registry\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -a, --all    apply to all services in registry\n  -q, --quiet  turn off lab process messages",
            "title": "Commands"
        },
        {
            "location": "/commands/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/commands/#init",
            "text": "Init adds the config files for other lab commands.     Description: \nInit adds a number of files to the working directory which are required for other lab processes. If not present, it will create a  docker-compose.yaml  file and a  .lab  folder in the root directory to manage various configuration options. It will also create, if missing,  cred/  and  data/  folders to store sensitive project information outside version control along with a  .gitignore  (or  .hgignore ) file to escape out standard non-VCS files.  PLEASE NOTE: With the option  --module , init creates instead a standard framework for publishing a python module.    Usage:  $ lab init [-h] [--vcs STRING] [--license STRING] [--module] [--heroku] [--aws] [--ec2] [--asg] [-q] [-f] [SERVICE]  Help:    Init adds a number of files to the working directory which are required for\nother lab processes. If not present, it will create a 'docker-compose.yaml' file\nand a '.lab' folder in the root directory to manage various configuration\noptions. It will also create, if missing, 'cred/' and 'data/' folders to store\nsensitive project information outside version control along with a '.gitignore'\n(or '.hgignore') file to escape out standard non-VCS files. PLEASE NOTE: With\nthe option '--module', init creates instead a standard framework for publishing\na python module.\n\npositional arguments:\n  SERVICE           (optional) service in lab registry\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --vcs STRING      VCS service to generate ignore file\n  --license STRING  name of software license type\n  --module          create python module framework\n  --heroku          add heroku config to .lab folder\n  --aws             add aws config to .lab folder\n  --ec2             add ec2 config to workdir\n  --asg             add asg config to workdir\n  -q, --quiet       turn off lab process messages\n  -f, --force       overwrite the existing resource",
            "title": "Init"
        },
        {
            "location": "/commands/#clean",
            "text": "Frees up space by removing superfluous files.     Description: \nRemoves broken resources from the registries.    Usage:  $ lab clean [-h] [-q] [--virtualbox STRING]  Help:    Removes broken resources from the registries.\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)",
            "title": "Clean"
        },
        {
            "location": "/commands/#connect",
            "text": "Edit settings on remote host manually.     Description: \nOpens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead.  PLEASE NOTE: connect uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of  lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c.    Usage:  $ lab connect [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] PLATFORM [SERVICE]  Help:    Opens up a direct ssh connection to remote host. Connect is currently only\navailable to the Amazon ec2 platform and only on systems running ssh natively.\nTo connect to a remote host on Windows, try using Putty instead. PLEASE NOTE:\nconnect uses the service name specified in the docker-compose.yaml configuration\nfile to determine which instance to connect to. The service name will be added\nas part of 'lab launch ec2'. Otherwise, a tag must be added to the instance with\nkey \"Services\" and value \"<service1>,<service2>\".\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages",
            "title": "Connect"
        },
        {
            "location": "/commands/#deploy",
            "text": "Makes a service available online.     Description: \nDeploys a service to a remote platform. Deploy is currently only available for the heroku and ec2 platforms. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/)  PLEASE NOTE: deploy uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of  lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c.    Usage:  $ lab deploy [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] [--ssl] [--resume] [--print] [--mount] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING | --jingo STRING] PLATFORM [SERVICE]  Help:    Deploys a service to a remote platform. Deploy is currently only available for\nthe heroku and ec2 platforms. Deploy can also deploy static html sites and apps\nusing their dependencies if the root folder is added to one of the runtime type\nflags (ex. lab deploy heroku --html site/) PLEASE NOTE: deploy uses the service\nname specified in the docker-compose.yaml configuration file to determine which\ninstance to connect to. The service name will be added as part of 'lab launch\nec2'. Otherwise, a tag must be added to the instance with key \"Services\" and\nvalue \"<service1>,<service2>\".\n\npositional arguments:\n  PLATFORM             name of remote platform\n  SERVICE              (optional) service in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --env STRING         type of development environment (default: test)\n  --tag STRING         tag associated with resource\n  --region STRING      name of platform region\n  -q, --quiet          turn off lab process messages\n  -f, --force          overwrite the existing resource\n  --ssl                turn off ssl everywhere\n  --resume             resume from prior progress point\n  --print              prints command(s) without running\n  --mount              mount volumes onto container\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --html STRING        path to folder with index.html\n  --php STRING         path to folder with index.php\n  --python STRING      path to folder with requirements.txt\n  --java STRING        path to folder with Java Procfile\n  --ruby STRING        path to folder with Ruby Procfile\n  --node STRING        path to folder with package.json\n  --jingo STRING       path to folder with jingo Procfile",
            "title": "Deploy"
        },
        {
            "location": "/commands/#get",
            "text": "Copies remote files to your local machine.     Description: \nCopies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform.  PLEASE NOTE: get uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of  lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c.    Usage:  $ lab get [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]  Help:    Copies a file or folder on remote host to working directory on localhost. Get is\ncurrently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the\nservice name specified in the docker-compose.yaml configuration file to\ndetermine which instance to connect to. The service name will be added as part\nof 'lab launch ec2'. Otherwise, a tag must be added to the instance with key\n\"Services\" and value \"<service1>,<service2>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource",
            "title": "Get"
        },
        {
            "location": "/commands/#home",
            "text": "Home makes it easy to locate your services.     Description: \nHome adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing  $ home <service>  will change the working directory to the folder registered under the service name. A quicklink to the workdir is also added by  lab init <service>     Usage:  $ lab home [-h] [--print] [--path STRING] [-f] SERVICE  Help:    Home adds the service name and working directory to the lab registry. On its\nfirst run, it also adds the alias 'home' to bash config. As a result, on\nsubsequent terminal sessions, typing 'home <service>' will change the working\ndirectory to the folder registered under the service name. A quicklink to the\nworkdir is also added by 'lab init <service>'\n\npositional arguments:\n  SERVICE        name of service in lab registry\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --print        prints path of service root\n  --path STRING  path to service root\n  -f, --force    overwrite the existing resource",
            "title": "Home"
        },
        {
            "location": "/commands/#launch",
            "text": "Launch creates one or more remote instances to host services.     Description: \nLaunches an instance or an auto-scaling group on a remote platform. Launch is currently only available for the ec2 platform. To create an configuration file to launch an ec2 instance, run  lab init --ec2  and adjust the settings appropriately.    Usage:  $ lab launch [-h] [--region STRING] [-i] [-q] [-f] PLATFORM [SERVICE]  Help:    Launches an instance or an auto-scaling group on a remote platform. Launch is\ncurrently only available for the ec2 platform. To create an configuration file\nto launch an ec2 instance, run 'lab init --ec2' and adjust the settings\nappropriately.\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  -i, --install    install deployment libraries on platform\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource",
            "title": "Launch"
        },
        {
            "location": "/commands/#list",
            "text": "Provides a way to find existing resources.     Description: \nGenerates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming.    Usage:  $ lab list [-h] [--region STRING] [--more] [-a] RESOURCE [PLATFORM]  Help:    Generates a list of the resources of a specific type. Only the service resource\ntype is supported, but docker oriented and remote host kinds of resources are\ncoming.\n\npositional arguments:\n  RESOURCE         type of lab resource. eg. services, images...\n  PLATFORM         (optional) name of remote platfrom\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  --more           paginate results longer than console height\n  -a, --all        include all details in results",
            "title": "List"
        },
        {
            "location": "/commands/#put",
            "text": "Copy files from your local machine.     Description: \nCopies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform.  PLEASE NOTE: put uses the service name specified in the docker-compose.yaml configuration file to determine which instance to connect to. The service name will be added as part of  lab launch ec2 . Otherwise, a tag must be added to the instance with key \u201cServices\u201d and value \u201c , \u201c.    Usage:  $ lab put [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]  Help:    Copies a local file or folder to user home on remote host. Put is currently only\navailable for the Amazon ec2 platform. PLEASE NOTE: put uses the service name\nspecified in the docker-compose.yaml configuration file to determine which\ninstance to connect to. The service name will be added as part of 'lab launch\nec2'. Otherwise, a tag must be added to the instance with key \"Services\" and\nvalue \"<service1>,<service2>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: test)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource",
            "title": "Put"
        },
        {
            "location": "/commands/#remove",
            "text": "Removes a service listing from the lab registry.     Description: \nRemoves clutter from your records.    Usage:  $ lab remove [-h] SERVICE  Help:    Removes clutter from your records.\n\npositional arguments:\n  SERVICE     name of service in lab registry\n\noptional arguments:\n  -h, --help  show this help message and exit",
            "title": "Remove"
        },
        {
            "location": "/commands/#start",
            "text": "Makes services available on localhost     Description: \nInitiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the environmental variables SYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine to the container.    Usage:  $ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--print] [SERVICES [SERVICES ...]]  Help:    Initiates a container with the Docker image for one or more services. Unless\noverridden by flags, lab automatically adds the environmental variables\nSYSTEM_IP, SYSTEM_ENVIRONMENT, SYSTEM_PLATFORM and PUBLIC_IP of the host machine\nto the container.\n\npositional arguments:\n  SERVICES             list of services in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --env STRING         type of development environment (default: dev)\n  --print              prints command(s) without running",
            "title": "Start"
        },
        {
            "location": "/commands/#update",
            "text": "Keeps your services up-to-date with the latest configurations.     Description: \nUpdates the configuration files for a service with the latest pocketlab configurations.    Usage:  $ lab update [-h] [-a] [-q] [SERVICES [SERVICES ...]]  Help:    Updates the configuration files for a service with the latest pocketlab\nconfigurations.\n\npositional arguments:\n  SERVICES     list of services in lab registry\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -a, --all    apply to all services in registry\n  -q, --quiet  turn off lab process messages",
            "title": "Update"
        },
        {
            "location": "/architecture/",
            "text": "Architecture\n\n\nPocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment.\n\n\nSystem Resources\n\n\n\n\n\n\nResource   \nDescription                                                     \n\n\n\n\n\n\nservice    \nself-contained modular component of an application or project   \n\n\nproject    \ngroup of interconnected services with user application          \n\n\nimage      \ncompilation of code & dependencies for service in a Docker image\n\n\ncontainer  \ninstantiation of a service in a Docker container                \n\n\nplatform   \ncomputational resources that run a service                      \n\n\ninstance   \ninstantiation of a project on a platform                        \n\n\nregion     \nsub-division of platform to manage content distribution         \n\n\nenvironment\nsub-division of plaform to manage development process           \n\n\nrepo       \nversion control repository containing the files for a service   \n\n\nfile       \npath to a file with configuration settings                      \n\n\nvirtualbox \noracle virtualbox boot2docker image (on Win7/8)                 \n\n\ntag        \nmetadata associated with a resource                             \n\n\nlog        \nfile or service in which to log stdout of service",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#architecture",
            "text": "Pocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment.",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#system-resources",
            "text": "Resource    Description                                                         service     self-contained modular component of an application or project     project     group of interconnected services with user application            image       compilation of code & dependencies for service in a Docker image  container   instantiation of a service in a Docker container                  platform    computational resources that run a service                        instance    instantiation of a project on a platform                          region      sub-division of platform to manage content distribution           environment sub-division of plaform to manage development process             repo        version control repository containing the files for a service     file        path to a file with configuration settings                        virtualbox  oracle virtualbox boot2docker image (on Win7/8)                   tag         metadata associated with a resource                               log         file or service in which to log stdout of service",
            "title": "System Resources"
        },
        {
            "location": "/libraries/",
            "text": "Libraries\n\n\nConfiguration Settings for Third-Party Libraries\n\n\nNginx\n\n\nA Reverse Proxy Server\n  \n\n\nInstallation on EC2:\n    \n\n\nsudo yum install -y nginx\nsudo chmod 777 /etc/rc3.d/S99local; echo \"service nginx restart\" >> /etc/rc3.d/S99local\n\n\n\n\nModification:\n \n\n\nnano /etc/nginx/nginx.conf\nsudo service nginx restart\n\n\n\n\nTroubleshooting:\n  \n\n\nCertbot\n\n\nA Free SSL Certificate Authority\n  \n\n\nInstallation on EC2:\n    \n\n\n$ sudo yum install -y wget\n$ wget https://dl.eff.org/certbot-auto\n$ sudo chmod a+x certbot-auto\n$ sudo mv certbot-auto /usr/local/bin/certbot-auto\n$ certbot-auto --debug -y --version\n$ sudo service nginx stop # optional\n$ sudo su -\n$ certbot-auto certonly --standalone -d collectiveacuity.com,www.collectiveacuity.com --debug\n> Is this ok [y/d/N]:\n> Enter email address: (used \u2026 cancel):\n> (A)gree/(C)ancel:\n> (Y)es/(N)o:\n$ exit\n$ sudo service nginx start # optional\n\n\n\n\nRenewal:\n(certificate expires every 90 days)\n\n\n$ sudo su -\n$ certbot-auto renew --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"\n$ exit\n\n\n\n\nModification:\n \n\n\n$ sudo su -\n$ certbot-auto certonly --standalone --debug -n --cert-name collectiveacuity.com -d collectiveacuity.com,www.collectiveacuity.com,api.collectiveacuity.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"  --debug\n$ exit\n\n\n\n\nCheck Certificates:\n  \n\n\n$ sudo su -\n$ certbot-auto certificates --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" \n$ exit\n\n\n\n\nTroubleshooting:\n\nA. Due to updates to certbot, python modules may be missing from installation:\n\n\n$ sudo su -\n$ pip install -U pip\n$ /root/.local/share/letsencrypt/bin/pip install {missing module}\n\n\n\n\nB. Due to 32bit / 64 bit issues, python venv libs may need to be copied:\n\n\n$ sudo su -\n$ \\cp -r /opt/eff.org/certbot/venv/lib64/* /opt/eff.org/certbot/venv/lib/\n$ exit\n\n\n\n\nKeytool\n\n\nA Keystore Generator for Self-Signed SSL Trust Rings\n\n\nCreate Folder for Keys:\n\n\nmkdir keys\ncd keys\n\n\n\n\nGenerate Root RSA Key:\n\n\nopenssl req -newkey rsa:2048 -x509 -nodes -keyout root.key \\\n -out root.crt -days 36500 -passout pass:mysecretpassword \\\n -subj /CN=root/OU=None/O=None/L=None/C=None\n\n\n\n\nGenerate Node Key:\n\n\nkeytool -genkey -keyalg RSA -alias 123.456.789.0 \\\n -validity 36500 -keystore 123.456.789.0.jks \\\n -storepass mysecretpassword -keypass mysecretpassword -keysize 4096 \\\n -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\"\nkeytool -importkeystore -srckeystore 123.456.789.0.jks \\\n -destkeystore 123.456.789.0.jks -deststoretype pkcs12 \\\n -storepass mysecretpassword -keypass mysecretpassword\n\n\n\n\nGenerate Cert Request:\n\n\nkeytool -certreq -alias 123.456.789.0 -file 123.456.789.0.csr \\\n -keystore 123.456.789.0.jks -storepass mysecretpassword -keypass mysecretpassword \\\n -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\"\n\n\n\n\nSign Cert with Root Cert:\n\n\nopenssl x509 -req -CA root.crt -CAkey root.key \\\n -in 123.456.789.0.csr -out 123.456.789.0.crt -days 36500 \\\n -CAcreateserial -passin pass:mysecretpassword\n\n\n\n\nAdd Certs to Node Keystore:\n\n\nkeytool -importcert -keystore 123.456.789.0.jks -alias root \\\n -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword\nkeytool -importcert -keystore 123.456.789.0.jks \\\n -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\\n -keypass mysecretpassword -storepass mysecretpassword\n\n\n\n\nAdd Root Cert to Truststore:\n\n\nkeytool -importcert -keystore truststore.jks -alias root \\\n -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword\n\n\n\n\nAdd Node Certs to Truststore (for each node):\n\n\nkeytool -importcert -keystore truststore.jks \\\n -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\\n -keypass mysecretpassword -storepass mysecretpassword\n\n\n\n\nVerify Certificates:\n\n\nopenssl x509 -in root.crt -text -noout\nkeytool -list -keystore 123.456.789.0.jks -storepass mysecretpassword\nopenssl verify -CAfile root.crt 123.456.789.0.crt\nkeytool -list -keystore truststore.jks -storepass mysecretpassword\n\n\n\n\nGenerate PEM Files:\n\n\nopenssl pkcs12 -in 123.456.789.0.jks -nokeys \\\n -out 123.456.789.0.cer.pem -passin pass:mysecretpassword\nopenssl pkcs12 -in 123.456.789.0.jks -nodes  \\\n -nocerts -out 123.456.789.0.key.pem -passin pass:mysecretpassword\n\n\n\n\nGenerate Certificate Chain:\n\n\ncat root.crt 123.456.789.0.crt > 123.456.789.0.chain",
            "title": "Libraries"
        },
        {
            "location": "/libraries/#libraries",
            "text": "Configuration Settings for Third-Party Libraries",
            "title": "Libraries"
        },
        {
            "location": "/libraries/#nginx",
            "text": "A Reverse Proxy Server     Installation on EC2:       sudo yum install -y nginx\nsudo chmod 777 /etc/rc3.d/S99local; echo \"service nginx restart\" >> /etc/rc3.d/S99local  Modification:    nano /etc/nginx/nginx.conf\nsudo service nginx restart  Troubleshooting:",
            "title": "Nginx"
        },
        {
            "location": "/libraries/#certbot",
            "text": "A Free SSL Certificate Authority     Installation on EC2:       $ sudo yum install -y wget\n$ wget https://dl.eff.org/certbot-auto\n$ sudo chmod a+x certbot-auto\n$ sudo mv certbot-auto /usr/local/bin/certbot-auto\n$ certbot-auto --debug -y --version\n$ sudo service nginx stop # optional\n$ sudo su -\n$ certbot-auto certonly --standalone -d collectiveacuity.com,www.collectiveacuity.com --debug\n> Is this ok [y/d/N]:\n> Enter email address: (used \u2026 cancel):\n> (A)gree/(C)ancel:\n> (Y)es/(N)o:\n$ exit\n$ sudo service nginx start # optional  Renewal: (certificate expires every 90 days)  $ sudo su -\n$ certbot-auto renew --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"\n$ exit  Modification:    $ sudo su -\n$ certbot-auto certonly --standalone --debug -n --cert-name collectiveacuity.com -d collectiveacuity.com,www.collectiveacuity.com,api.collectiveacuity.com --pre-hook \"service nginx stop\" --post-hook \"service nginx start\"  --debug\n$ exit  Check Certificates:     $ sudo su -\n$ certbot-auto certificates --standalone --debug --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" \n$ exit  Troubleshooting: \nA. Due to updates to certbot, python modules may be missing from installation:  $ sudo su -\n$ pip install -U pip\n$ /root/.local/share/letsencrypt/bin/pip install {missing module}  B. Due to 32bit / 64 bit issues, python venv libs may need to be copied:  $ sudo su -\n$ \\cp -r /opt/eff.org/certbot/venv/lib64/* /opt/eff.org/certbot/venv/lib/\n$ exit",
            "title": "Certbot"
        },
        {
            "location": "/libraries/#keytool",
            "text": "A Keystore Generator for Self-Signed SSL Trust Rings  Create Folder for Keys:  mkdir keys\ncd keys  Generate Root RSA Key:  openssl req -newkey rsa:2048 -x509 -nodes -keyout root.key \\\n -out root.crt -days 36500 -passout pass:mysecretpassword \\\n -subj /CN=root/OU=None/O=None/L=None/C=None  Generate Node Key:  keytool -genkey -keyalg RSA -alias 123.456.789.0 \\\n -validity 36500 -keystore 123.456.789.0.jks \\\n -storepass mysecretpassword -keypass mysecretpassword -keysize 4096 \\\n -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\"\nkeytool -importkeystore -srckeystore 123.456.789.0.jks \\\n -destkeystore 123.456.789.0.jks -deststoretype pkcs12 \\\n -storepass mysecretpassword -keypass mysecretpassword  Generate Cert Request:  keytool -certreq -alias 123.456.789.0 -file 123.456.789.0.csr \\\n -keystore 123.456.789.0.jks -storepass mysecretpassword -keypass mysecretpassword \\\n -dname \"CN=123.456.789.0, OU=None, O=None, L=None, C=None\"  Sign Cert with Root Cert:  openssl x509 -req -CA root.crt -CAkey root.key \\\n -in 123.456.789.0.csr -out 123.456.789.0.crt -days 36500 \\\n -CAcreateserial -passin pass:mysecretpassword  Add Certs to Node Keystore:  keytool -importcert -keystore 123.456.789.0.jks -alias root \\\n -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword\nkeytool -importcert -keystore 123.456.789.0.jks \\\n -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\\n -keypass mysecretpassword -storepass mysecretpassword  Add Root Cert to Truststore:  keytool -importcert -keystore truststore.jks -alias root \\\n -file root.crt -noprompt -keypass mysecretpassword -storepass mysecretpassword  Add Node Certs to Truststore (for each node):  keytool -importcert -keystore truststore.jks \\\n -alias 123.456.789.0 -file 123.456.789.0.crt -noprompt \\\n -keypass mysecretpassword -storepass mysecretpassword  Verify Certificates:  openssl x509 -in root.crt -text -noout\nkeytool -list -keystore 123.456.789.0.jks -storepass mysecretpassword\nopenssl verify -CAfile root.crt 123.456.789.0.crt\nkeytool -list -keystore truststore.jks -storepass mysecretpassword  Generate PEM Files:  openssl pkcs12 -in 123.456.789.0.jks -nokeys \\\n -out 123.456.789.0.cer.pem -passin pass:mysecretpassword\nopenssl pkcs12 -in 123.456.789.0.jks -nodes  \\\n -nocerts -out 123.456.789.0.key.pem -passin pass:mysecretpassword  Generate Certificate Chain:  cat root.crt 123.456.789.0.crt > 123.456.789.0.chain",
            "title": "Keytool"
        },
        {
            "location": "/roadmap/",
            "text": "Roadmap\n\n\nFeatures\n\n\n\n\nCreates VCS Compliant Project Framework\n\n\nCreates Python Module Framework\n\n\nRuns as Docker Compose Wrapper\n\n\nMaintains Compatibility Across OS\n\n\nAutomates Service Deployment to EC2\n\n\nAutomates Service Deployment to Heroku\n\n\nAutomates Let\u2019s Encrypt SSL Certificates\n\n\nUpdates GitHub / BitBucket / Gitlab Repos \nTODO\n\n\nAdds PingAPI / Uptime Robot Monitoring \nTODO\n\n\nAdds LastPass Credential Sharing \nTODO\n\n\nPerforms Test Sequencing \nTODO\n\n\nAutomates AWS / Heroku Account Setup \nTODO\n\n\n\n\nCommands\n\n\n\n\n\n\nCommand   \nDescription                                           \nStatus                                   \n\n\n\n\n\n\ninit      \ncreates a lab framework in workdir                    \navailable                                \n\n\nlist      \nlists the instances of a resource type                \navailable                                \n\n\nupdate    \nupdates the config files for a service                \navailable                                \n\n\nremove    \nremoves a service from the registry                   \navailable                                \n\n\nclean     \ncleans registries of broken resources                 \navailable                                \n\n\nhome      \ncreates a quicklink to workdir                        \navailable                                \n\n\nbuild     \ncreates a new image from Dockerfile for service       \nuse \ndocker build\n\n\nstart     \ninitiates Docker containers for services              \navailable                                \n\n\nstop      \nterminates a running container for a service          \nuse \ndocker stop\n \n\n\nenter     \nopens up a shell cli inside a running container       \nuse \ndocker exec\n \n\n\nlaunch    \nstarts instances on remote platform                   \navailable                                \n\n\nterminate \nremoves an instance from a remote platform            \n                                         \n\n\nconnect   \nconnects to remote host through ssh                   \navailable                                \n\n\nput       \ncopy a file to remote host through scp                \navailable                                \n\n\nget       \ncopy a file from remote host through scp              \navailable                                \n\n\ndeploy    \ndeploys service to a remote platform                  \navailable                                \n\n\nwithdrawal\nremoves a service from a live remote host             \n                                         \n\n\nsetup     \ncreates account resources for a remote platform       \n                                         \n\n\nteardown  \nremoves an account from a remote platform             \n                                         \n\n\nrenew     \nretrieves a new ssl certificate for url endpoint      \n                                         \n\n\nmonitor   \ncreates a monitor of services running on remote host  \n                                         \n\n\nshare     \ntransfers service credentials through password manager",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#roadmap",
            "text": "",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#features",
            "text": "Creates VCS Compliant Project Framework  Creates Python Module Framework  Runs as Docker Compose Wrapper  Maintains Compatibility Across OS  Automates Service Deployment to EC2  Automates Service Deployment to Heroku  Automates Let\u2019s Encrypt SSL Certificates  Updates GitHub / BitBucket / Gitlab Repos  TODO  Adds PingAPI / Uptime Robot Monitoring  TODO  Adds LastPass Credential Sharing  TODO  Performs Test Sequencing  TODO  Automates AWS / Heroku Account Setup  TODO",
            "title": "Features"
        },
        {
            "location": "/roadmap/#commands",
            "text": "Command    Description                                            Status                                       init       creates a lab framework in workdir                     available                                  list       lists the instances of a resource type                 available                                  update     updates the config files for a service                 available                                  remove     removes a service from the registry                    available                                  clean      cleans registries of broken resources                  available                                  home       creates a quicklink to workdir                         available                                  build      creates a new image from Dockerfile for service        use  docker build  start      initiates Docker containers for services               available                                  stop       terminates a running container for a service           use  docker stop    enter      opens up a shell cli inside a running container        use  docker exec    launch     starts instances on remote platform                    available                                  terminate  removes an instance from a remote platform                                                        connect    connects to remote host through ssh                    available                                  put        copy a file to remote host through scp                 available                                  get        copy a file from remote host through scp               available                                  deploy     deploys service to a remote platform                   available                                  withdrawal removes a service from a live remote host                                                         setup      creates account resources for a remote platform                                                   teardown   removes an account from a remote platform                                                         renew      retrieves a new ssl certificate for url endpoint                                                  monitor    creates a monitor of services running on remote host                                              share      transfers service credentials through password manager",
            "title": "Commands"
        }
    ]
}