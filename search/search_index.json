{
    "docs": [
        {
            "location": "/",
            "text": "Pocket Lab\n\n\nA Command Line Tool for Managing Laboratory Projects\n\nby \nCollective Acuity\n\n\n\n  \n\n    \n\n      \nDownloads\n\n      \nhttp://pypi.python.org/pypi/pocketLab\n\n    \n\n    \n\n      \nSource\n\n      \nhttps://github.com/collectiveacuity/pocketLab\n\n    \n\n    \n\n      \nDocumentation\n\n      \nhttps://collectiveacuity.github.io/pocketLab/\n\n    \n\n  \n\n\n\n\n\nIntroduction\n\n\nPocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code.  \n\n\nIntegrated Services\n\n\n\n\nDocker\n: https://www.docker.com\n\n\nVirtualbox\n: (on Windows 7/8)\n\n\nHeroku\n: https://devcenter.heroku.com/articles/heroku-cli\n\n\nAWS\n: https://console.aws.amazon.com\n\n\n\n\nInstallation\n\n\nFrom PyPi\n\n\n    $ pip install pocketlab\n\n\n\n\nFrom GitHub\n\n\n    $ git clone https://github.com/collectiveacuity/pocketLab\n    $ cd pocketLab\n    $ python setup.py sdist --format=gztar,zip\n    $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz\n    $ pip install dist/pocketlab-0.*-py3-none-any.whl\n\n\n\n\nGetting Started\n\n\nAll commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type \nlab --help\n from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands. \n\n\nRegister a service in the working directory::\n\n\n$ lab home <service>\n\n\n\nInitialize the lab framework in the working directory::\n\n\n$ lab init\n\n\n\nYou can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository. \nlab init\n will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files.\n\n\nFurther Reading\n\n\nOnce you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the \nCommands page\n.",
            "title": "Home"
        },
        {
            "location": "/#pocket-lab",
            "text": "A Command Line Tool for Managing Laboratory Projects \nby  Collective Acuity  \n   \n     \n       Downloads \n       http://pypi.python.org/pypi/pocketLab \n     \n     \n       Source \n       https://github.com/collectiveacuity/pocketLab \n     \n     \n       Documentation \n       https://collectiveacuity.github.io/pocketLab/",
            "title": "Pocket Lab"
        },
        {
            "location": "/#introduction",
            "text": "Pocket Lab is a python-based command-line tool which is designed to manage the development operations of lab projects and make it easier to deploy code across different platforms. Pocket Lab relies heavily upon Docker to provide consistency across development environments but it also streamlines the Docker workflow without compromising the security of credentials and sensitive code.",
            "title": "Introduction"
        },
        {
            "location": "/#integrated-services",
            "text": "Docker : https://www.docker.com  Virtualbox : (on Windows 7/8)  Heroku : https://devcenter.heroku.com/articles/heroku-cli  AWS : https://console.aws.amazon.com",
            "title": "Integrated Services"
        },
        {
            "location": "/#installation",
            "text": "From PyPi      $ pip install pocketlab  From GitHub      $ git clone https://github.com/collectiveacuity/pocketLab\n    $ cd pocketLab\n    $ python setup.py sdist --format=gztar,zip\n    $ pip wheel --no-index --no-deps --wheel-dir dist dist/pocketlab-0.*.tar.gz\n    $ pip install dist/pocketlab-0.*-py3-none-any.whl",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "All commands for Pocket Lab use the \u2018lab\u2019 keyword. So, at any time, you can type  lab --help  from the terminal to see the help menu for the module. In order to use the module for building and deployment with docker, you will first need to setup the service framework around your project with a couple of commands.   Register a service in the working directory::  $ lab home <service>  Initialize the lab framework in the working directory::  $ lab init  You can run these commands in a fresh directory at the start of a new project, but they are especially useful for preparing your localhost environment after you have cloned a repo from the remote repository.  lab init  will create a couple of local folders for managing credentials and any local data volumes. It will also add placeholder files in those folders from the notes directory and ensure that your version control system ignores these sensitive folders. When you need to update your credentials or edit your configuration, you can simply change the values in these files.",
            "title": "Getting Started"
        },
        {
            "location": "/#further-reading",
            "text": "Once you have setup the lab framework for your project, you can use other commands to build images, run them locally or deploy them to a variety of cloud providers. Descriptions for how to use the other commands can be found on the  Commands page .",
            "title": "Further Reading"
        },
        {
            "location": "/commands/",
            "text": "Commands\n\n\nHome\n\n\nHome makes it easy to locate your services.\n  \n\n\nDescription:\n\nHome adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing \n$ home <service>\n will change the working directory to the folder registered under the service name.  \n\n\nUsage:\n\n\n$ lab home [-h] [--print] [--path STRING] [-f] SERVICE\n\n\n\n\nHelp:\n \n\n\nHome adds the service name and working directory to the lab registry. On its\nfirst run, it also adds the alias 'home' to bash config. As a result, on\nsubsequent terminal sessions, typing 'home <service>' will change the working\ndirectory to the folder registered under the service name.\n\npositional arguments:\n  SERVICE        name of service in lab registry\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --print        prints path of service root\n  --path STRING  path to service root\n  -f, --force    overwrite the existing resource\n\n\n\n\nInit\n\n\nInit adds the config files for other lab commands.\n  \n\n\nDescription:\n\nInit adds a number of files to the working directory which are required for other lab processes. If not present, it will create a \nlab.yaml\n file and a \n.lab\n folder in the root directory to manage various configuration options. It will also create, if missing, \ncred/\n and \ndata/\n folders to store sensitive project information outside version control along with a \n.gitignore\n (or \n.hgignore\n) file to escape out standard non-VCS files.\n\n\nPLEASE NOTE: With the option \n--module <module_name>\n, init creates instead a standard framework for publishing a python module.  \n\n\nUsage:\n\n\n$ lab init [-h] [--module STRING] [--vcs STRING] [--license STRING] [--heroku] [--aws] [-q]\n\n\n\n\nHelp:\n \n\n\nInit adds a number of files to the working directory which are required for\nother lab processes. If not present, it will create a 'lab.yaml' file and a\n'.lab' folder in the root directory to manage various configuration options. It\nwill also create, if missing, 'cred/' and 'data/' folders to store sensitive\nproject information outside version control along with a '.gitignore' (or\n'.hgignore') file to escape out standard non-VCS files. PLEASE NOTE: With the\noption '--module <module_name>', init creates instead a standard framework for\npublishing a python module.\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --module STRING   name for python module\n  --vcs STRING      VCS service to generate ignore file\n  --license STRING  name of software license type\n  --heroku          add heroku config to .lab folder\n  --aws             add aws config to .lab folder\n  -q, --quiet       turn off lab process messages\n\n\n\n\nClean\n\n\nFrees up space by removing superfluous files.\n  \n\n\nDescription:\n\nRemoves broken resources from the registries.  \n\n\nUsage:\n\n\n$ lab clean [-h] [-q] [--virtualbox STRING]\n\n\n\n\nHelp:\n \n\n\nRemoves broken resources from the registries.\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n\n\n\n\nConnect\n\n\nEdit settings on remote host manually.\n  \n\n\nDescription:\n\nOpens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead.\n\n\nPLEASE NOTE: connect uses the docker container alias value specified in the docker-compose.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c\n\u201c.  \n\n\nUsage:\n\n\n$ lab connect [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nOpens up a direct ssh connection to remote host. Connect is currently only\navailable to the Amazon ec2 platform and only on systems running ssh natively.\nTo connect to a remote host on Windows, try using Putty instead. PLEASE NOTE:\nconnect uses the docker container alias value specified in the docker-\ncompose.yaml configuration file to determine which instance to connect to. A tag\nmust be added manually to the instance with key \"Containers\" and value\n\"<container_alias>\".\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n\n\n\n\nDeploy\n\n\nMakes a service available online.\n  \n\n\nDescription:\n\nDeploys a service to a remote platform. Deploy is currently only available for the heroku platform. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/)  \n\n\nUsage:\n\n\n$ lab deploy [-h] [-q] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING] PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nDeploys a service to a remote platform. Deploy is currently only available for\nthe heroku platform. Deploy can also deploy static html sites and apps using\ntheir dependencies if the root folder is added to one of the runtime type flags\n(ex. lab deploy heroku --html site/)\n\npositional arguments:\n  PLATFORM             name of remote platform\n  SERVICE              (optional) service in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --html STRING        path to folder with index.html\n  --php STRING         path to folder with index.php\n  --python STRING      path to folder with requirements.txt\n  --java STRING        path to folder with Java Procfile\n  --ruby STRING        path to folder with Ruby Procfile\n  --node STRING        path to folder with package.json\n\n\n\n\nGet\n\n\nCopies remote files to your local machine.\n  \n\n\nDescription:\n\nCopies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform.\n\n\nPLEASE NOTE: get uses the docker container alias value specified in the lab.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c\n\u201c.  \n\n\nUsage:\n\n\n$ lab get [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nCopies a file or folder on remote host to working directory on localhost. Get is\ncurrently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the\ndocker container alias value specified in the lab.yaml configuration file to\ndetermine which instance to connect to. A tag must be added manually to the\ninstance with key \"Containers\" and value \"<container_alias>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource\n\n\n\n\nList\n\n\nProvides a way to find existing resources.\n  \n\n\nDescription:\n\nGenerates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming.  \n\n\nUsage:\n\n\n$ lab list [-h] [--region STRING] [--more] RESOURCE [PLATFORM]\n\n\n\n\nHelp:\n \n\n\nGenerates a list of the resources of a specific type. Only the service resource\ntype is supported, but docker oriented and remote host kinds of resources are\ncoming.\n\npositional arguments:\n  RESOURCE         type of lab resource. eg. services, images...\n  PLATFORM         (optional) name of remote platfrom\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  --more           paginate results longer than console height\n\n\n\n\nPut\n\n\nCopy files from your local machine.\n  \n\n\nDescription:\n\nCopies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform.\n\n\nPLEASE NOTE: put uses the docker container alias value specified in the lab.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c\n\u201c.  \n\n\nUsage:\n\n\n$ lab put [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]\n\n\n\n\nHelp:\n \n\n\nCopies a local file or folder to user home on remote host. Put is currently only\navailable for the Amazon ec2 platform. PLEASE NOTE: put uses the docker\ncontainer alias value specified in the lab.yaml configuration file to determine\nwhich instance to connect to. A tag must be added manually to the instance with\nkey \"Containers\" and value \"<container_alias>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource\n\n\n\n\nRemove\n\n\nRemoves a service listing from the lab registry.\n  \n\n\nDescription:\n\nRemoves clutter from your records.  \n\n\nUsage:\n\n\n$ lab remove [-h] SERVICE\n\n\n\n\nHelp:\n \n\n\nRemoves clutter from your records.\n\npositional arguments:\n  SERVICE     name of service in lab registry\n\noptional arguments:\n  -h, --help  show this help message and exit\n\n\n\n\nStart\n\n\nMakes services available on localhost\n  \n\n\nDescription:\n\nInitiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the host machine variables SYSTEM_LOCALHOST=\nhostname -i\n and SYSTEM_ENVIRONMENT=\u201ddev\u201d to the container.  \n\n\nUsage:\n\n\n$ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--ip STRING] [SERVICES [SERVICES ...]]\n\n\n\n\nHelp:\n \n\n\nInitiates a container with the Docker image for one or more services. Unless\noverridden by flags, lab automatically adds the host machine variables\nSYSTEM_LOCALHOST=`hostname -i` and SYSTEM_ENVIRONMENT=\"dev\" to the container.\n\npositional arguments:\n  SERVICES             list of services in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --env STRING         type of development environment (default: dev)\n  --ip STRING          ipv4 or ipv6 address\n\n\n\n\nUpdate\n\n\nKeeps your services up-to-date with the latest configurations.\n  \n\n\nDescription:\n\nUpdates the configuration files for a service with the latest pocketlab configurations.  \n\n\nUsage:\n\n\n$ lab update [-h] [-a] [-q] [SERVICES [SERVICES ...]]\n\n\n\n\nHelp:\n \n\n\nUpdates the configuration files for a service with the latest pocketlab\nconfigurations.\n\npositional arguments:\n  SERVICES     list of services in lab registry\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -a, --all    apply to all services in registry\n  -q, --quiet  turn off lab process messages",
            "title": "Commands"
        },
        {
            "location": "/commands/#commands",
            "text": "",
            "title": "Commands"
        },
        {
            "location": "/commands/#home",
            "text": "Home makes it easy to locate your services.     Description: \nHome adds the service name and working directory to the lab registry. On its first run, it also adds the alias \u2018home\u2019 to bash config. As a result, on subsequent terminal sessions, typing  $ home <service>  will change the working directory to the folder registered under the service name.    Usage:  $ lab home [-h] [--print] [--path STRING] [-f] SERVICE  Help:    Home adds the service name and working directory to the lab registry. On its\nfirst run, it also adds the alias 'home' to bash config. As a result, on\nsubsequent terminal sessions, typing 'home <service>' will change the working\ndirectory to the folder registered under the service name.\n\npositional arguments:\n  SERVICE        name of service in lab registry\n\noptional arguments:\n  -h, --help     show this help message and exit\n  --print        prints path of service root\n  --path STRING  path to service root\n  -f, --force    overwrite the existing resource",
            "title": "Home"
        },
        {
            "location": "/commands/#init",
            "text": "Init adds the config files for other lab commands.     Description: \nInit adds a number of files to the working directory which are required for other lab processes. If not present, it will create a  lab.yaml  file and a  .lab  folder in the root directory to manage various configuration options. It will also create, if missing,  cred/  and  data/  folders to store sensitive project information outside version control along with a  .gitignore  (or  .hgignore ) file to escape out standard non-VCS files.  PLEASE NOTE: With the option  --module <module_name> , init creates instead a standard framework for publishing a python module.    Usage:  $ lab init [-h] [--module STRING] [--vcs STRING] [--license STRING] [--heroku] [--aws] [-q]  Help:    Init adds a number of files to the working directory which are required for\nother lab processes. If not present, it will create a 'lab.yaml' file and a\n'.lab' folder in the root directory to manage various configuration options. It\nwill also create, if missing, 'cred/' and 'data/' folders to store sensitive\nproject information outside version control along with a '.gitignore' (or\n'.hgignore') file to escape out standard non-VCS files. PLEASE NOTE: With the\noption '--module <module_name>', init creates instead a standard framework for\npublishing a python module.\n\noptional arguments:\n  -h, --help        show this help message and exit\n  --module STRING   name for python module\n  --vcs STRING      VCS service to generate ignore file\n  --license STRING  name of software license type\n  --heroku          add heroku config to .lab folder\n  --aws             add aws config to .lab folder\n  -q, --quiet       turn off lab process messages",
            "title": "Init"
        },
        {
            "location": "/commands/#clean",
            "text": "Frees up space by removing superfluous files.     Description: \nRemoves broken resources from the registries.    Usage:  $ lab clean [-h] [-q] [--virtualbox STRING]  Help:    Removes broken resources from the registries.\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)",
            "title": "Clean"
        },
        {
            "location": "/commands/#connect",
            "text": "Edit settings on remote host manually.     Description: \nOpens up a direct ssh connection to remote host. Connect is currently only available to the Amazon ec2 platform and only on systems running ssh natively. To connect to a remote host on Windows, try using Putty instead.  PLEASE NOTE: connect uses the docker container alias value specified in the docker-compose.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c \u201c.    Usage:  $ lab connect [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] PLATFORM [SERVICE]  Help:    Opens up a direct ssh connection to remote host. Connect is currently only\navailable to the Amazon ec2 platform and only on systems running ssh natively.\nTo connect to a remote host on Windows, try using Putty instead. PLEASE NOTE:\nconnect uses the docker container alias value specified in the docker-\ncompose.yaml configuration file to determine which instance to connect to. A tag\nmust be added manually to the instance with key \"Containers\" and value\n\"<container_alias>\".\n\npositional arguments:\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages",
            "title": "Connect"
        },
        {
            "location": "/commands/#deploy",
            "text": "Makes a service available online.     Description: \nDeploys a service to a remote platform. Deploy is currently only available for the heroku platform. Deploy can also deploy static html sites and apps using their dependencies if the root folder is added to one of the runtime type flags (ex. lab deploy heroku \u2013html site/)    Usage:  $ lab deploy [-h] [-q] [--virtualbox STRING] [--html STRING | --php STRING | --python STRING | --java STRING | --ruby STRING | --node STRING] PLATFORM [SERVICE]  Help:    Deploys a service to a remote platform. Deploy is currently only available for\nthe heroku platform. Deploy can also deploy static html sites and apps using\ntheir dependencies if the root folder is added to one of the runtime type flags\n(ex. lab deploy heroku --html site/)\n\npositional arguments:\n  PLATFORM             name of remote platform\n  SERVICE              (optional) service in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --html STRING        path to folder with index.html\n  --php STRING         path to folder with index.php\n  --python STRING      path to folder with requirements.txt\n  --java STRING        path to folder with Java Procfile\n  --ruby STRING        path to folder with Ruby Procfile\n  --node STRING        path to folder with package.json",
            "title": "Deploy"
        },
        {
            "location": "/commands/#get",
            "text": "Copies remote files to your local machine.     Description: \nCopies a file or folder on remote host to working directory on localhost. Get is currently only available for the Amazon ec2 platform.  PLEASE NOTE: get uses the docker container alias value specified in the lab.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c \u201c.    Usage:  $ lab get [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]  Help:    Copies a file or folder on remote host to working directory on localhost. Get is\ncurrently only available for the Amazon ec2 platform. PLEASE NOTE: get uses the\ndocker container alias value specified in the lab.yaml configuration file to\ndetermine which instance to connect to. A tag must be added manually to the\ninstance with key \"Containers\" and value \"<container_alias>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource",
            "title": "Get"
        },
        {
            "location": "/commands/#list",
            "text": "Provides a way to find existing resources.     Description: \nGenerates a list of the resources of a specific type. Only the service resource type is supported, but docker oriented and remote host kinds of resources are coming.    Usage:  $ lab list [-h] [--region STRING] [--more] RESOURCE [PLATFORM]  Help:    Generates a list of the resources of a specific type. Only the service resource\ntype is supported, but docker oriented and remote host kinds of resources are\ncoming.\n\npositional arguments:\n  RESOURCE         type of lab resource. eg. services, images...\n  PLATFORM         (optional) name of remote platfrom\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --region STRING  name of platform region\n  --more           paginate results longer than console height",
            "title": "List"
        },
        {
            "location": "/commands/#put",
            "text": "Copy files from your local machine.     Description: \nCopies a local file or folder to user home on remote host. Put is currently only available for the Amazon ec2 platform.  PLEASE NOTE: put uses the docker container alias value specified in the lab.yaml configuration file to determine which instance to connect to. A tag must be added manually to the instance with key \u201cContainers\u201d and value \u201c \u201c.    Usage:  $ lab put [-h] [--env STRING] [--tag STRING] [--region STRING] [-q] [-f] PATH PLATFORM [SERVICE]  Help:    Copies a local file or folder to user home on remote host. Put is currently only\navailable for the Amazon ec2 platform. PLEASE NOTE: put uses the docker\ncontainer alias value specified in the lab.yaml configuration file to determine\nwhich instance to connect to. A tag must be added manually to the instance with\nkey \"Containers\" and value \"<container_alias>\".\n\npositional arguments:\n  PATH             path to file or folder\n  PLATFORM         name of remote platform\n  SERVICE          (optional) service in lab registry\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --env STRING     type of development environment (default: dev)\n  --tag STRING     tag associated with resource\n  --region STRING  name of platform region\n  -q, --quiet      turn off lab process messages\n  -f, --force      overwrite the existing resource",
            "title": "Put"
        },
        {
            "location": "/commands/#remove",
            "text": "Removes a service listing from the lab registry.     Description: \nRemoves clutter from your records.    Usage:  $ lab remove [-h] SERVICE  Help:    Removes clutter from your records.\n\npositional arguments:\n  SERVICE     name of service in lab registry\n\noptional arguments:\n  -h, --help  show this help message and exit",
            "title": "Remove"
        },
        {
            "location": "/commands/#start",
            "text": "Makes services available on localhost     Description: \nInitiates a container with the Docker image for one or more services. Unless overridden by flags, lab automatically adds the host machine variables SYSTEM_LOCALHOST= hostname -i  and SYSTEM_ENVIRONMENT=\u201ddev\u201d to the container.    Usage:  $ lab start [-h] [-q] [--virtualbox STRING] [--env STRING] [--ip STRING] [SERVICES [SERVICES ...]]  Help:    Initiates a container with the Docker image for one or more services. Unless\noverridden by flags, lab automatically adds the host machine variables\nSYSTEM_LOCALHOST=`hostname -i` and SYSTEM_ENVIRONMENT=\"dev\" to the container.\n\npositional arguments:\n  SERVICES             list of services in lab registry\n\noptional arguments:\n  -h, --help           show this help message and exit\n  -q, --quiet          turn off lab process messages\n  --virtualbox STRING  name of docker virtualbox on Win7/8 (default: default)\n  --env STRING         type of development environment (default: dev)\n  --ip STRING          ipv4 or ipv6 address",
            "title": "Start"
        },
        {
            "location": "/commands/#update",
            "text": "Keeps your services up-to-date with the latest configurations.     Description: \nUpdates the configuration files for a service with the latest pocketlab configurations.    Usage:  $ lab update [-h] [-a] [-q] [SERVICES [SERVICES ...]]  Help:    Updates the configuration files for a service with the latest pocketlab\nconfigurations.\n\npositional arguments:\n  SERVICES     list of services in lab registry\n\noptional arguments:\n  -h, --help   show this help message and exit\n  -a, --all    apply to all services in registry\n  -q, --quiet  turn off lab process messages",
            "title": "Update"
        },
        {
            "location": "/architecture/",
            "text": "Architecture\n\n\nPocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment.\n\n\nSystem Resources\n\n\n\n\n\n\nResource   \nDescription                                                     \n\n\n\n\n\n\nservice    \nself-contained modular component of an application or project   \n\n\nproject    \ngroup of interconnected services with user application          \n\n\nimage      \ncompilation of code & dependencies for service in a Docker image\n\n\ncontainer  \ninstantiation of a service in a Docker container                \n\n\nplatform   \ncomputational resources that run a service                      \n\n\ninstance   \ninstantiation of a project on a platform                        \n\n\nregion     \nsub-division of platform to manage content distribution         \n\n\nenvironment\nsub-division of plaform to manage development process           \n\n\nrepo       \nversion control repository containing the files for a service   \n\n\nfile       \npath to a file with configuration settings                      \n\n\nvirtualbox \noracle virtualbox boot2docker image (on Win7/8)                 \n\n\ntag        \nmetadata associated with a resource                             \n\n\nlog        \nfile or service in which to log stdout of service",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#architecture",
            "text": "Pocket Lab is designed around a service-oriented architecture. A service can be a data processor, client-side code, a backend server, a job scheduler, a database, etc. But a service also maps one-to-one to many other components of development: a repo, an image, a container, a folder, etc. Importantly, a project or application is typically made up of one or more services and services can also be provided by a third party. This module uses the service as the principle atomic component to manage the compositional process of project development and deployment.",
            "title": "Architecture"
        },
        {
            "location": "/architecture/#system-resources",
            "text": "Resource    Description                                                         service     self-contained modular component of an application or project     project     group of interconnected services with user application            image       compilation of code & dependencies for service in a Docker image  container   instantiation of a service in a Docker container                  platform    computational resources that run a service                        instance    instantiation of a project on a platform                          region      sub-division of platform to manage content distribution           environment sub-division of plaform to manage development process             repo        version control repository containing the files for a service     file        path to a file with configuration settings                        virtualbox  oracle virtualbox boot2docker image (on Win7/8)                   tag         metadata associated with a resource                               log         file or service in which to log stdout of service",
            "title": "System Resources"
        },
        {
            "location": "/roadmap/",
            "text": "Roadmap\n\n\nFeatures\n\n\n\n\nDocker Wrapper\n\n\nGitHub / BitBucket / Gitlab Repos\n\n\nOS Independence\n\n\nAWS Deployment Management\n\n\nLet\u2019s Encrypt SSL Certificates\n\n\nLocalTunnel.me / Ngrok\n\n\nPingAPI / Uptime Robot Monitoring\n\n\nTest Sequencing\n\n\n\n\nCommands\n\n\n\n\n\n\nCommand  \nDescription                                    \nStatus   \n\n\n\n\n\n\nhome     \ncreates a home for service in workdir          \navailable\n\n\ninit     \ncreates a lab framework in workdir             \navailable\n\n\nlist     \nlists the instances of a resource type         \navailable\n\n\nupdate   \nupdates the config files for a service         \navailable\n\n\nremove   \nremoves a service from the registry            \navailable\n\n\nclean    \ncleans registries of broken resources          \navailable\n\n\nbuild    \ncreates a new image from Dockerfile for service\n         \n\n\nstart    \ninitiates Docker containers for services       \navailable\n\n\nstop     \nterminates a running container for a service   \n         \n\n\nenter    \nopens up a shell cli inside a running container\n         \n\n\ntunnel   \ncreates a tunnel to a remote proxy host        \n         \n\n\ndeploy   \ndeploys service to a remote platform           \navailable\n\n\nconnect  \nconnects to remote host through ssh            \navailable\n\n\nput      \ncopy a file to remote host through scp         \navailable\n\n\nget      \ncopy a file from remote host through scp       \navailable\n\n\nsetup    \ncreates account resources on a remote service",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#roadmap",
            "text": "",
            "title": "Roadmap"
        },
        {
            "location": "/roadmap/#features",
            "text": "Docker Wrapper  GitHub / BitBucket / Gitlab Repos  OS Independence  AWS Deployment Management  Let\u2019s Encrypt SSL Certificates  LocalTunnel.me / Ngrok  PingAPI / Uptime Robot Monitoring  Test Sequencing",
            "title": "Features"
        },
        {
            "location": "/roadmap/#commands",
            "text": "Command   Description                                     Status       home      creates a home for service in workdir           available  init      creates a lab framework in workdir              available  list      lists the instances of a resource type          available  update    updates the config files for a service          available  remove    removes a service from the registry             available  clean     cleans registries of broken resources           available  build     creates a new image from Dockerfile for service            start     initiates Docker containers for services        available  stop      terminates a running container for a service               enter     opens up a shell cli inside a running container            tunnel    creates a tunnel to a remote proxy host                    deploy    deploys service to a remote platform            available  connect   connects to remote host through ssh             available  put       copy a file to remote host through scp          available  get       copy a file from remote host through scp        available  setup     creates account resources on a remote service",
            "title": "Commands"
        }
    ]
}